doctype html
html(lang='en')
  head
    title About spacegame
    meta(charset='utf-8')
    meta(name='viewport' content='width=1024px, initial-scale=1')
    link(rel='stylesheet', href='style.css')
  body
    #impress
      .step
        h1 spacegame <em>(work in progress)</em>
        h2 @madbence
      .step(data-x=1500)
        h1 about the game
        ul
          li multiplayer asteroids (without asteroids)
          li originally a project @BME
          li experimenting with various cutting-edge technologies
          li open open source™ (github.com/level/community)
      .step(data-x=1500, data-y=1000)
        h1 the stack
        ul.stack
          li
            img(src='nginx.svg' style='width: 100px')
          li koa
          li websockets
          li
            img(src='react.svg' style='height: 40px; width: 40px')
            | react
          li redux
          li
            img(src='babel.svg' style='width: 100px')
          li
            img(src='flow.png' style='height: 40px')
          li
            img(src='travis.png' style='height: 40px')
            | travis ci
          li
            img(src='letsencrypt.svg', style='width: 150px')
          li etc...
      .step(data-x=1150, data-y=1050, data-scale=0.1)
        pre.
          export default props => (
            &lt;div>
              &lt;h2>Stateless components!&lt;/h2>
              &lt;h3>{props.subtitle}&lt;/h3>
            &lt;/div>
          );
      .step(data-x=1150, data-y=1125, data-scale=0.1)
        pre.
          function square(x: number) {
            return x * x;
          }
        p.left superior type inference & error messages!
      .step(data-x=3000)
        h1 why javascript?
        ul
          li shared code (really!)
          li ...
          li ...
      .step(data-x=3000, data-y=1000)
        h1 before redux: about reduce
        pre.
          [1, 2, 3].reduce(<span class='highlight'>f</span>, i) == <span class='highlight'>f</span>(<span class='highlight'>f</span>(<span class='highlight'>f</span>(i, 1), 2), 3)

          currentState == f(f(f(initialState, <span class='highlight-2'>a1</span>), <span class='highlight-2'>a2</span>), <span class='highlight-2'>a3</span>)
      .step(data-x=3000, data-y=2000)
        h1 redux is about: (state, action) → state
        ul
          li immutable → easy change detection + undo/redo
          li deterministic → for replication
          li no dependencies → for testing
          li static typing → to avoid bugs early
          li plain objects → easy serialization
          li fast (faster: immutable.js & mori)
      .step(data-x=3000, data-y=3000)
        h1 simulation
        include sim.jade
      .step(data-x=4500)
        h1 the interesting stuff
        h2 replicate state between clients ↔ server
        p
          img(src='cap.svg' style='height: 500px')
      .step.non-present-hide(data-x=4500, data-y=1000, style='z-index: 2')
        img(src='relax.gif', style='width: 800px')
      .step(data-x=4500, data-y=1000)
        h1 relax!
        ul
          li i needed availability ("lag" not allowed)
          li i needed <strong>eventual</strong> consistency (it's fine to diverge)
          li i needed partition tolarence (not really a problem)
      .step.non-present-hide(data-x=4500, data-y=1000)
        img(src='lag.gif' style='width: 80%')
      .step(data-x=4500, data-y=1000)
      .step.non-present-hide(data-x=4500, data-y=1000)
        img(src='lag2.gif' style='width: 70%')
      .step(data-x=4500, data-y=1000)
      .step.non-present-hide(data-x=4500, data-y=2000)
        h1 how does it work?
        img(src='explain.gif', style='width: 90%')
      .step.non-present-hide(data-x=4500, data-y=2000)
        h1 how does it work?
        ul
          li user initiates an action ("turn left thruster on!")
          li execute action on local state
          li send it to the server (websocket)
          li execute action on the server
          li send it to every client
          li every client executes it on their local state
      .step(data-x=4500, data-y=3000)
        h1 deal with inconsistencies (optimistic handling)
        ul
          li execution might fail on the server!
          li rollback state to the last "verified" state
          li rollback is easy, since state is immutable
      .step(data-x=7500)
        h1 todo
        ul
          li fix bugs :-(
          li webgl graphics
          li user management (somehow that was skipped)
          li replay/save games
          li offline games (serviceworker)
          li automatic deployment
          li try out new technologies
      .step(data-x=7500, data-y=1000)
        h1 thanks!
        h2 questions?
        h3 https://spacegame.danyi.me
        h3  ͡° ͜ʖ ͡°
    script(src='impress.js')
    script impress().init()
